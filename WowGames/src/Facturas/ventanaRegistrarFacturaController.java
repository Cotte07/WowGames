package Facturas;

import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.LinkedList;
import java.util.ResourceBundle;

import BaseDatos.Datos;
import Cliente.Clientes;
import Producto.Operaciones;
import Producto.Productos;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Cell;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;

/**Clase de el controlador de la ventana registrar factura
 * 
 * 
 *
 */
public class ventanaRegistrarFacturaController implements Initializable{
	@FXML
	private TextField codigoProductoTxt;
	@FXML
    private TextField cantidadTxt;
	@FXML
	private TextField nombreTxt;
	@FXML
	private TextField apellidoTxt;
	@FXML
	private TextField identificacionTxt;
	@FXML
	private TextField telefonoTxt;
	 @FXML
	private TextField direccionTxt;
	@FXML
    private TextField credencialVendedorTxt;
	@FXML
	private TableView<Productos> registrarVentaTable;
	@FXML
	private TableColumn<Productos, Float> ivaColumn;
	@FXML
	private TableColumn<Productos, String> referenciaColumn;
	@FXML
	private TableColumn<Productos, String> tipoProductoColumn;
	@FXML
	private TableColumn<Productos, String> tipoJuegoColumn;
	@FXML
	private TableColumn<Productos, String> nombreProductoColumn;
	@FXML
	private TableColumn<Productos, String> plataformaColumn;
	@FXML
	private TableColumn<Productos, String> precioColumn;
	@FXML
	private TableColumn<Productos, Float> impuestoColumn;
	@FXML
	private TableColumn<Productos, Float> valorColumn;
	@FXML
	private TableColumn<?, ?> cantidadColumn;
	 @FXML
	private TableColumn<?, ?> totalColumn;
	@FXML
	private Button ingresarBtn;
	@FXML
	private Button regresarBtn;
	@FXML
	private CheckBox descuentoBox;
	@FXML
	private Button generarFacturaBtn;
	@FXML
    private Label valorTotalLabel;
	
	private Datos dataProvider = new Datos();
	private Datos dataProvider1 = new Datos();
	private ObservableList<Productos> data = FXCollections.observableArrayList();
	private ObservableList<Clientes> data1 = FXCollections.observableArrayList();
	private ObservableList<Facturas> data2 = FXCollections.observableArrayList();
	private ObservableList<FacturaProducto> data3 = FXCollections.observableArrayList();

	
	private float id; 
	private String fecha;
	private float subtotal;
	private float valorTotal;
	private float descuento = 0;
	private String crendencialVendedor;
	private String identificacionCliente;
	private float valorTotalFactura = 0;
	private String totalFactura;
	int validar = 0;
	
	Productos producto;
	
	
	// Event Listener on TableView[#registrarVentaTable].onMouseClicked
	@FXML
	public void onSelection(MouseEvent event) {
		// TODO Autogenerated
		descuento =  (float) 0.2; 
	}
	
	

	// Event Listener on Button[#ingresarBtn].onMouseClicked
	/**Metodo que muestra los datos del producto
	 * 
	 * @param event
	 */
	@FXML
	public void onIngresarClicked(MouseEvent event) {
		Productos producto = dataProvider.consultarProducto(codigoProductoTxt.getText());
		
		try {
		    if (producto.getReferencia() != null) {
		        this.data.add(producto); // Agregar el producto a la lista
		        
		        String cantidadString = cantidadTxt.getText();
		        
		        int cantidad = Integer.parseInt(cantidadString);//cambia el valor de cantidad de tipo String a tipo int
		        
		        Operaciones op = new Operaciones();
		        op.setProducto(producto);
		        float totalProducto = op.total();
		        
		        
		        descuento = totalProducto*descuento;
		        totalProducto = (totalProducto*cantidad) - descuento;
		        
		        producto.setCantidad(cantidad);
		        
		        		        
		        cantidadColumn.setCellValueFactory(new PropertyValueFactory<>("cantidad")); //agrego el valor de cantidad a la columna cantidad
		        totalColumn.setCellValueFactory(new PropertyValueFactory<>("total"));
		        
		        
		        for (Productos prod : data) {
		            prod.setCantidad(cantidad);
		            prod.setTotal(totalProducto); 
		        }
		        
		        
		       
		   
		        this.registrarVentaTable.setItems(data); // Asignar la lista a la TableView para que se muestren los datos
		    	
	            
		        valorTotalFactura += producto.getTotal();
		        
		        subtotal += op.subTotal();
	            
	            totalFactura = Float.toString(valorTotalFactura);
	            valorTotalLabel.setText(totalFactura);
		    	}
			}
		 catch (Exception e) {
			 Alert alt = new Alert(AlertType.ERROR);
				alt.setContentText("Error ");
				alt.setHeaderText("Producto no encontrado");
				alt.show();
			}
	}
	
	
	
	
	// Event Listener on Button[#regresarBtn].onMouseClicked
	@FXML
	public void onRegresarClicked(MouseEvent event) {
		Parent root = null;
	    try {
	        root = FXMLLoader.load(getClass().getResource("/Presentacion/ventanaOpcionesVendedor.fxml"));
	        Scene scene = new Scene(root);
	        
	        // Obtén el escenario actual usando el evento
	        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	        
	        // Configura el nuevo escenario
	        Stage newStage = new Stage();
	        newStage.setScene(scene);
	        
	        //Agregar titulo a la ventana
	        newStage.setTitle("WowGames: VentanaOpciones");
	        
	        // Muestra el nuevo escenario
	        newStage.show();
	        
	        // Cierra el escenario actual
	        currentStage.close();
	        
	    } catch (IOException e) {
	        // TODO Auto-generated catch block
	        e.printStackTrace();
	    }
		
		// TODO Autogenerated
	}
	
	
	
	// Event Listener on Button[#generarFacturaBtn].onMouseClicked
	/**Metodo que genera el id de las facturas automaticamente, calcula la fecha actual y calcula el subtotal de la factura
	 * 
	 * @param event
	 */
	@FXML
	public void onGenerarClicked(MouseEvent event) {		
		
		Clientes cliente = new Clientes(identificacionTxt.getText(), nombreTxt.getText(),
				apellidoTxt.getText(),fecha ,direccionTxt.getText(), telefonoTxt.getText());
		
        boolean successAñadirCliente = this.dataProvider1.createCliente(cliente);
        
        if (successAñadirCliente) {
             
        	validar += 1;
        } else {
			Alert alt = new Alert(Alert.AlertType.ERROR);
			alt.setContentText("Error creando la factura: c");
			alt.setHeaderText("error");
			alt.show();
		
	}
        
        Facturas factura = new Facturas(id, fecha, subtotal, valorTotalFactura, descuento, 
        		credencialVendedorTxt.getText(), identificacionTxt.getText());
        
        boolean succesAñadirFactura = this.dataProvider.createFactura(factura);
        
        if (succesAñadirFactura) {
            
        	validar += 1; 
        	
        } else {
			Alert alt = new Alert(Alert.AlertType.ERROR);
			alt.setContentText("Error creando la factura: f");
			alt.setHeaderText("error");
			alt.show();
		
	}
        int cantidadProducto;
        cantidadProducto =Integer.parseInt(cantidadTxt.getText());
        
        String idFactura = null;
        
        int idfacturaProducto = 0;
        String idf = null;
        
        
        FacturaProducto fp = new FacturaProducto(idf, cantidadProducto, idFactura, codigoProductoTxt.getText());
        boolean succesFacturaProducto = this.dataProvider.facturaProducto(fp);

        if(succesFacturaProducto) {
        	validar += 1;
        }else {
			Alert alt = new Alert(Alert.AlertType.ERROR);
			alt.setContentText("Error creando la factura: fp");
			alt.setHeaderText("error");
			alt.show();	
        }

        if(validar == 3) {
        	Alert alt = new Alert(AlertType.CONFIRMATION);
			alt.setContentText("Guardado");
			alt.setHeaderText("Se generó la factura");
			alt.show();
        }
        else {
        	Alert alt = new Alert(Alert.AlertType.ERROR);
			alt.setContentText("Error creando la factura");
			alt.setHeaderText("error");
			alt.show();
        }
        
        
	}
	
	
	
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		this.referenciaColumn.setCellValueFactory(new PropertyValueFactory<Productos, String>("referencia"));
		this.ivaColumn.setCellValueFactory(new PropertyValueFactory<Productos, Float>("iva"));
		this.tipoProductoColumn.setCellValueFactory(new PropertyValueFactory<Productos, String>("tipoProducto"));
		this.tipoJuegoColumn.setCellValueFactory(new PropertyValueFactory<Productos, String>("tipoJuego"));
		this.nombreProductoColumn.setCellValueFactory(new PropertyValueFactory<Productos, String>("nombre"));
		this.valorColumn.setCellValueFactory(new PropertyValueFactory<Productos, Float>("valorUnitario"));
		this.impuestoColumn.setCellValueFactory(new PropertyValueFactory<Productos, Float>("impuesto"));
		this.plataformaColumn.setCellValueFactory(new PropertyValueFactory<Productos, String>("plataforma"));
		this.cantidadColumn.setCellValueFactory(new PropertyValueFactory< >("cantidad"));
		this.totalColumn.setCellValueFactory(new PropertyValueFactory< >("total"));
		
		
	}
}
